alpha = 0.05
mystarstat
starcrit = quantile(mcstarstat, 1-alpha)
starcrit
mean(mcstarstat > mystarstat)
pval = mean(mcstarstat > mystarstat)
pval
hist(s, breaks = 15)
setwd("/Users/rsudhir/Documents/GitHub/MA-416-Analysis-of-Varience/Datasets")
myData <- read.csv("Company_Payroll_8_23(1).csv")
e_age <- myData$Age
Mean <- mean(e_age)
Mean
Mean
sd <- sd(e_age)
sd
myData <- read.csv("Company_Payroll_8_23(1).csv")
e_age <- myData$Age
Mean <- mean(e_age)
Mean
sd <- sd(e_age)
sd
A <- (e_age - 5)
B <- (e_age - 5)^2
B <- A^2
S <- sum((e_age - 5)^2)
S <- sum(A^2)
S <- sum(B)
C <- sum((e_age - Mean)^2)
C
boxplot(C)
boxplot(e_age)
boxplot(mydata$Age, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(myData$Age, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(Age, horizontal=T, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(mydata$Age, horizontal=F, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(myData$Age, horizontal=F, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(myData$Age, horizontal=F, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(myData$Age, horizontal=T, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(myData$Age, horizontal=T, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(myData$Age, horizontal=F, main='Box Plot of Age (in years)', col='lightgreen')
boxplot(e_age)
#Vertical box plot
boxplot(e_age)
#Horizontal box plot
boxplot(myData$Age, horizontal=T, main='Box Plot of Age (in years)', col='lightgreen')
C
#Vertical box plot
boxplot(e_age)
hist(e_age)
hist(myData$Hourly_Wage, main='Histogram of Wages', col='lightblue')
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(myData$Hourly_Wage, xlab = 'Hourly Wage', col='lightblue')
hist(myData$Hourly_Wage, xlab = 'Hourly Wage', col='lightblue')
hist(Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(myData$Hourly_Wage, main='Histogram of Wages', col='lightblue')
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(myData$Hourly_Wage, xlab = 'Hourly Wage', col='lightblue')
hist(myData$Hourly_Wage, main='Histogram of Wages', col='lightblue')
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(e_age)
getwd()
hist(e_age)
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(e_age)
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
hist(e_age)
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
z_payamt <- Pay_Amount - mean(Pay_Amount)/sd(Pay_Amount)
z_payamt <- (mydata$Pay_Amount - mean(mydata$Pay_Amount))/sd(mydata$Pay_Amount)
z_payamt <- (myData$Pay_Amount - mean(mydata$Pay_Amount))/sd(mydata$Pay_Amount)
z_payamt <- (myData$Pay_Amount - mean(myData$Pay_Amount))/sd(myData$Pay_Amount)
z_payamt <- myData$Pay_Amount - mean(myData$Pay_Amount)/sd(myData$Pay_Amount)
z_payamt <- (Pay_Amount - mean(Pay_Amount))/sd(Pay_Amount)
ze_age <- (e_age - mean(e_age))/sd(e_age)
ze_age
ze_age <- (e_age - mean(e_age))/sd(e_age)
mean(e_age)
sd(e_age)
ze_age
mean(ze_age)
sd(ze_age)
gmean <- function(x){
exp(mean(log(x)))
}
View(gmean)
gmean(abs(ze_age))
setwd("/Users/rsudhir/Desktop/BU Year 3/Sem 2/MA 416/Datasets")
mydata = read.csv('Company_Payroll_8_23(1).csv')
S <- mydata$Efficiency_Factor_Obs
hist(s)
n <- length(S)
n <- length(S)
Fx = seq(from=1, to=n, by=1)/(n+1)
S = sort(S)
Sz = (S-mean(s))/sd(S)
Psix = pnorm(Sz, 0, 1, lower.tail = T)
Dx = abs(Psix - Fx)
n <- length(S)
Fx = seq(from=1, to=n, by=1)/(n+1)
S = sort(S)
Sz = (S-mean(s))/sd(S)
Psix = pnorm(Sz, 0, 1, lower.tail = T)
Dx = abs(Psix - Fx)
my_KS = max(Dx)
my_Cvm = sum(Dx^2)
my_AD = sum(Dx^2/(Fx*(1-Fx)))
c(my_KS, my_Cvm, my_AD)
set.seed(123456)
S <- mydata$Efficiency_Factor_Obs
hist(S)
n <- length(S)
Fx = seq(from=1, to=n, by=1)/(n+1)
S = sort(S)
Sz = (S-mean(S))/sd(S)
Psix = pnorm(Sz, 0, 1, lower.tail = T)
Dx = abs(Psix - Fx)
my_KS = max(Dx)
my_Cvm = sum(Dx^2)
my_AD = sum(Dx^2/(Fx*(1-Fx)))
c(my_KS, my_Cvm, my_AD)
set.seed(123456)
#c = concatenating
sim_ks = c()
sum_cvm = c()
sim_ad = c()
for(k in 1:niterations){
sim_sam = rnorm(n, 0, 1)
sim_sam = sort(sim_sam)
sim_psix = pnorm(sim_sam, 0, 1, lower,tail=T)
sim_Dx = abs(Fx - sim_psix)
sim_ks = c(sim_ks)
sim_cvm = c(sim_cvm)
sim_ad = c(sim_ad)
}
for(k in 1:niterations){
sim_sam = rnorm(n, 0, 1)
sim_sam = sort(sim_sam)
sim_psix = pnorm(sim_sam, 0, 1, lower,tail=T)
sim_Dx = abs(Fx - sim_psix)
sim_ks = c(sim_ks, max(sim_Dx))
sim_cvm = c(sim_cvm, sum(sim_Dx^2))
sim_ad = c(sim_ad, sum(sim_Dx^2)/(Fx*(1-Fx)))
}
mydata = read.csv('Company_Payroll_8_23(1).csv')
S <- mydata$Efficiency_Factor_Obs
hist(S)
n <- length(S)
Fx = seq(from=1, to=n, by=1)/(n+1)
S = sort(S)
Sz = (S-mean(S))/sd(S)
Psix = pnorm(Sz, 0, 1, lower.tail = T)
Dx = abs(Psix - Fx)
my_KS = max(Dx)
my_Cvm = sum(Dx^2)
my_AD = sum(Dx^2/(Fx*(1-Fx)))
c(my_KS, my_Cvm, my_AD)
set.seed(123456)
niterations = 20000
#c = concatenating
sim_ks = c()
sum_cvm = c()
sim_ad = c()
for(k in 1:niterations){
sim_sam = rnorm(n, 0, 1)
sim_sam = sort(sim_sam)
sim_psix = pnorm(sim_sam, 0, 1, lower,tail=T)
sim_Dx = abs(Fx - sim_psix)
sim_ks = c(sim_ks, max(sim_Dx))
sim_cvm = c(sim_cvm, sum(sim_Dx^2))
sim_ad = c(sim_ad, sum(sim_Dx^2)/(Fx*(1-Fx)))
}
mydata = read.csv('Company_Payroll_8_23(1).csv')
S <- mydata$Efficiency_Factor_Obs
hist(S)
n <- length(S)
Fx = seq(from=1, to=n, by=1)/(n+1)
S = sort(S)
Sz = (S-mean(S))/sd(S)
Psix = pnorm(Sz, 0, 1, lower.tail = T)
Dx = abs(Psix - Fx)
my_KS = max(Dx)
my_Cvm = sum(Dx^2)
my_AD = sum(Dx^2/(Fx*(1-Fx)))
c(my_KS, my_Cvm, my_AD)
set.seed(123456)
niterations = 20000
#c = concatenating
sim_ks = c()
sum_cvm = c()
sim_ad = c()
for(k in 1:niterations){
sim_sam = rnorm(n, 0, 1)
sim_sam = sort(sim_sam)
sim_psix = pnorm(sim_sam, 0, 1, lower.tail=T)
sim_Dx = abs(Fx - sim_psix)
sim_ks = c(sim_ks, max(sim_Dx))
sim_cvm = c(sim_cvm, sum(sim_Dx^2))
sim_ad = c(sim_ad, sum(sim_Dx^2)/(Fx*(1-Fx)))
}
mydata = read.csv('Company_Payroll_8_23(1).csv')
S <- mydata$Efficiency_Factor_Obs
hist(S)
n <- length(S)
Fx = seq(from=1, to=n, by=1)/(n+1)
S = sort(S)
Sz = (S-mean(S))/sd(S)
Psix = pnorm(Sz, 0, 1, lower.tail = T)
Dx = abs(Psix - Fx)
my_KS = max(Dx)
my_Cvm = sum(Dx^2)
my_AD = sum(Dx^2/(Fx*(1-Fx)))
c(my_KS, my_Cvm, my_AD)
set.seed(123456)
niterations = 20000
#c = concatenating
sim_ks = c()
sim_cvm = c()
sim_ad = c()
for(k in 1:niterations){
sim_sam = rnorm(n, 0, 1)
sim_sam = sort(sim_sam)
sim_psix = pnorm(sim_sam, 0, 1, lower.tail=T)
sim_Dx = abs(Fx - sim_psix)
sim_ks = c(sim_ks, max(sim_Dx))
sim_cvm = c(sim_cvm, sum(sim_Dx^2))
sim_ad = c(sim_ad, sum(sim_Dx^2)/(Fx*(1-Fx)))
}
hist(sim_ks)
for(k in 1:niterations){
sim_sam = rnorm(n, 0, 1)
sim_sam = sort(sim_sam)
sim_psix = pnorm(sim_sam, 0, 1, lower.tail=T)
sim_Dx = abs(Fx - sim_psix)
sim_ks = c(sim_ks, max(sim_Dx))
sim_cvm = c(sim_cvm, sum(sim_Dx^2))
sim_ad = c(sim_ad, sum(sim_Dx^2)/(Fx*(1-Fx)))
}
hist(sim_ad)
hist(sim_cvm)
hist(sim_ks)
hist(sim_ks, breaks=100)
hist(sim_cvm, breaks=100)
hist(sim_ad, breaks=100)
alpha = 0.15
quantile(sim_ks, 1-alpha)
quantile(sim_cvm, 1-alpha)
quantile(sim_ad, 1-alpha)
myData <- read.csv("Company_Payroll_8_23(1).csv")
e_age <- myData$Age
Mean <- mean(e_age)
Mean
sd <- sd(e_age)
sd
# To subtract a number, such as 5, from every element in "e_age",
# the line of code below will do this, and also define it as a new vector A:
A <- (e_age - 5)
#Let us also assume that after you subtract 5 from each of these elements,
#you want to element-wise square each of those differences (at the same time)
#(that is, it squares each of the elements in a vector).
#Below will do this, and define the results in a new vector B:
B <- (e_age - 5)^2
B <- A^2
#Note here that B is a vector. Suppose we want to add all of these elements together,
#and define the sum as a variable S. Below will do this:
S <- sum((e_age - 5)^2)
#Two alternative and equivalent ways of doing the same thing using the variable definitions
#are shown below. If you are new at coding, the following may be more preferable since it
#allows easier ways of debugging code
S <- sum(A^2)
S <- sum(B)
#Take each element in "e_age", subtract the arithmetic mean of "e_age" from each
#element in "e_age", square those differences, then add up all of those values.
#What is the value of this calculation?
C <- sum((e_age - Mean)^2)
C
#Vertical box plot
boxplot(e_age)
#boxplot(myData$Age, main='Box Plot of Age (in years)', col='lightgreen')
#boxplot(myData$Age, horizontal=F, main='Box Plot of Age (in years)', col='lightgreen')
#Horizontal box plot
boxplot(myData$Age, horizontal=T, main='Box Plot of Age (in years)', col='lightgreen')
#to construct a histogram of a univariate set of data (say, X), the following line of code
#will do:
hist(e_age)
hist(myData$Hourly_Wage, main='Histogram of Wages', xlab = 'Hourly Wage', col='lightblue')
z_payamt <- (myData$Pay_Amount - mean(myData$Pay_Amount))/sd(myData$Pay_Amount)
#If you haven't already done so, store the ages of all employees in a vector called "e_age",
#then create a new vector "ze_age" that standardizes the vector "e_age" as described in the
#previous problem.
ze_age <- (e_age - mean(e_age))/sd(e_age)
ze_age
mean(ze_age)
sd(ze_age)
gmean <- function(x){
exp(mean(log(x)))
}
gmean(abs(ze_age))
mean(myData$Hourly_Wage)
sd(myData$Hourly_Wage)
options(digits = 15)
gmean(myData$Hourly_Wage)
options(digits = 10)
gmean(myData$Hourly_Wage)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked <= 20)]
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked <= 20)]
mean(wage_fulltime)
mean(wage_fulltime)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked <= 25)]
sd(wage_fulltime)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked < 25)]
sd(wage_fulltime)
sd(wage_fulltime)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked > 30)]
var(wage_fulltime)
sum(mydata$Hourly_Wage > 20)
mean(mydata$Hours_Worked <= 25)
mean(mydata$Job_Rank == 'Associate')
mean(mydata$Efficiency_Factor_Obs > mean(mydata$Efficiency_Factor_Obs))
cov(mydata$Prior_Experience,mydata$Efficiency_Factor_Obs)
cor(mydata$Hourly_Wage,mydata$Hours_Worked)
cor(mydata$Prior_Experience,mydata$Hourly_Wage)
cor(mydata$Age,mydata$Hours_Worked)
plot(myData$Hours_Worked, myData$Age, title="Hours Worked v. Age",
pch=16, cex=0.5, col='blue', xlab='Hours Worked', ylab='Age')
plot(myData$Age, myData$Hours_Worked, main="Hours Worked v. Age",
pch=16, cex=0.5, col='blue', xlab='Age', ylab='Hours Worked')
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if(!require(ggplot2)) install.packages(ggplot2)
library(ggplot2)
import.library(ggplot2)
ggplot(mydata, mydata$Age, mydata$Hours_Worked)
ggplot(mydata, aes(mydata$Age, mydata$Hours_Worked))
#the following lines of R code will produce a blank ggplot object with mydata$Age on the
#horizontal axis and mydata$Hours_Worked on the vertical axis
ggplot(myData, aes(myData$Age, myData$Hours_Worked))
#the following lines of R code will produce a blank ggplot object with mydata$Age on the
#horizontal axis and mydata$Hours_Worked on the vertical axis
ggplot(myData, aes(Age, Hours_Worked))
ggplot(myData, aes(Age, Hours_Worked))+geompoint(color='blue')
ggplot(myData, aes(Age, Hours_Worked))+geom_point(color='blue')
ggplot(myData, aes(Age, Hours_Worked))+geompoint(color = aes(Hourly_Wage))
ggplot(myData, aes(Age, Hours_Worked))+geom_point(color = aes(Hourly_Wage))
ggplot(myData, aes(Age, Hours_Worked))+geom_point(color = Hourly_Wage)
ggplot(myData, aes(Age, Hours_Worked))+geom_point(aes(color =Hourly_Wage)
ggplot(myData, aes(Age, Hours_Worked))+geom_point(aes(color=Hourly_Wage))
ggplot(myData, aes(Age, Hours_Worked))+geom_point(aes(color=Hourly_Wage))
options(digits = 10)
gmean(myData$Hourly_Wage)
options(digits = 12)
gmean(myData$Hourly_Wage)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked >= 20)]
mean(wage_fulltime)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked < 25)]
sd(wage_fulltime)
wage_fulltime <- myData$Hourly_Wage[which(myData$Hours_Worked > 30)]
var(wage_fulltime)
setwd("/Users/rsudhir/Documents/GitHub/MA-416-Analysis-of-Varience/Datasets")
mydata <- read.csv("Company_Payroll_8_23(1).csv")
mydata <- read.csv("Company_Payroll_8_23(1).csv")
y <- replicate(n,0) #replicates 0 n times, so that we can plot a 2 dimensional points on a
#replicates 0 n times, so that we can plot a 2 dimensional points on a one dimensional line
plot(mydata$Hourly_Wage, y, main="Hourly Wage", xlab="Hw")
mydata <- read.csv("Company_Payroll_8_23(1).csv")
n <- length(mydata$Hourly_Wage)
y <- replicate(n,0)
#replicates 0 n times, so that we can plot a 2 dimensional points on a one dimensional line
plot(mydata$Hourly_Wage, y, main="Hourly Wage", xlab="Hw")
boxplot(plot(mydata$Hourly_Wage, horiztonal=T, main"box plot of hourly wage",xlab="Hourly wage in Dollars"
col ="springgreen")
boxplot(plot(mydata$Hourly_Wage, horiztonal=T, main"box plot of hourly wage",xlab="Hourly wage in Dollars",
boxplot(plot(mydata$Hourly_Wage, horiztonal=T, main="box plot of hourly wage",xlab="Hourly wage in Dollars",
col ="springgreen"))
boxplot(plot(mydata$Hourly_Wage, horizontal=T, main="box plot of hourly wage",xlab="Hourly wage in Dollars",
col ="springgreen"))
boxplot(mydata$Hourly_Wage, horizontal=T, main="box plot of hourly wage",
xlab="Hourly wage in Dollars",
col ="springgreen"
)
Companydata <- data.frame(mydata$Age, mydata$Hourly_Wage, mydata$Hours_Worked)
boxplot(Companydata, horizontal=T, main="Box plots comparing: Age, Hourly_Wage, Hours_Worked ",
xlab="Hourly wage in Dollars",
col ="springgreen"
)
boxplot(Companydata, horizontal=T, main="Box plots comparing: Age, Hourly_Wage, Hours_Worked ",
names=()"age",,
boxplot(Companydata, horizontal=T, main="Box plots comparing: Age, Hourly_Wage, Hours_Worked ",
names=c("age","Hourly Wage","Hours Worked")
col =c("springgreen","lightblue","pink")
boxplot(Companydata, horizontal=T, main="Box plots comparing: Age, Hourly_Wage, Hours_Worked ",
names=c("age","Hourly Wage","Hours Worked"),
col=c("springgreen","lightblue","pink")
)
Companydata <- data.frame(((mydata$Age -mean(mydata$Age))/sd(mydata$Age)),
((mydata$Hourly_Wage -mean(mydata$Hourly_Wage))/sd(mydata$Hourly_Wage)),
((mydata$Hours_Worked -mean(mydata$Hours_Worked))/sd(mydata$Hours_Worked))
)
boxplot(Companydata, horizontal=T, main="Box plots comparing: Age, Hourly_Wage, Hours_Worked ",
names=c("age","Hourly Wage","Hours Worked"),
col=c("springgreen","lightblue","pink")
)
s<- rnorm(10000, mean = 124, sd = 2.45)
hist(s, breaks = 50, main= "sample histogram", xlab = "X in (cm)", col="orchid")
barplot(favcolorfreq, main="favorite color frequency",
names=favcolor,
col=favcolor)
favcolor <- c("green","blue","red")
favcolorfreq <- c(18,29,12)
barplot(favcolorfreq, main="favorite color frequency",
names=favcolor,
col=favcolor)
names_percents <- paste(favcolor, favcolorpercents, "%") #basically adds the percent and % to every
favcolorpercents <- (favcolorfreq/sum(favcolorfreq))*100
names_percents <- paste(favcolor, favcolorpercents, "%") #basically adds the percent and % to every
#color in favcolor
names_percents
favcolorpercents <- round((favcolorfreq/sum(favcolorfreq))*100)
names_percents <- paste(favcolor, favcolorpercents, "%") #basically adds the percent and % to every
#color in favcolor
names_percents
pie(favcolorpercents, main="Pie chart of color preference", labels = =names_percents)
pie(favcolorpercents, main="Pie chart of color preference", labels = names_percents)
pie(favcolorpercents, main="Pie chart of color preference", labels = names_percents
col=favcolor)
pie(favcolorpercents, main="Pie chart of color preference", labels = names_percents,
col=favcolor)
# Graphical representation for multivariate data
install.packages ("fmsb")
library(fmsb)
pchar <- c("Openness", "Conscientiousness", "Extraversion", "Agreeableness", "Neuroticism")
# Sample on a continuous scale from 0 to 10
person1 <- c(3.2, 8.7, 5.4, 9.3, 2.1)
person2 <- c(8.7, 7.6, 4.3, 9.7, 8.3)
persons
persons <- rbind(person1,person2)
persons
colnames(persons) <- pchar
persons
#assigning names to each column on the dataset
colnames(persons) <- pchar
persons
personswithMinMax <- data.frame(rbind(rep(10,5),rep(0,5), persons))
personswithMinMax
colnames(personswithMinMax) <- rbind("max","min",pchar)
personswithMinMax <- data.frame(rbind(rep(10,5),rep(0,5), persons))
personswithMinMax
radarchart(personswithMinMax)
radarchart(personswithMinMax,
cglty=1, cglcol="gray" #this determins the background lines
pity=1, pcol=c("steelblue", "orchid"), p1wd-1 # this is for the lines representing the
radarchart(personswithMinMax,
cglty=1, cglcol="gray", #this determins the background lines
pity=1, pcol=c("steelblue", "orchid"), p1wd-1 # this is for the lines representing the
#the persons, p1wd determines the width
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray", #this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), p1wd-1 # this is for the lines representing the
#the persons, p1wd determines the width
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray", #this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), plwd-1 # this is for the lines representing the
#the persons, p1wd determines the width
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray", #this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), plwd-1 # this is for the lines representing the
#the persons, p1wd determines the width
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray", #this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), plwd=1 # this is for the lines representing the
#the persons, p1wd determines the width
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray",
#this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), plwd=1,
# this is for the lines representing the
#the persons, p1wd determines the width
pfcol=c(rgb(0, 0, 1, 0.1), rgb(0.5, 0, 0.5, 0.1))
# this determines the shading inside the lines
# (red, green, blue, opacity)
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray",
#this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), plwd=1,
# this is for the lines representing the
#the persons, p1wd determines the width
pfcol=c(rgb(0, 0, 1, 0.1), rgb(0.5, 0, 0.5, 0.1)),
# this determines the shading inside the lines
# (red, green, blue, opacity)
vlcex = 0.7
)
radarchart(personswithMinMax,
cglty=1, cglcol="gray",
# this determins the background lines
plty=1, pcol=c("steelblue", "orchid"), plwd=1,
# this is for the lines representing the
# the persons, p1wd determines the width
pfcol=c(rgb(0, 0, 1, 0.1), rgb(0.5, 0, 0.5, 0.1)),
# this determines the shading inside the lines
# (red, green, blue, opacity)
vlcex = 0.7
# this changes the size of the text
)
